// proto/heartbeat.pb.h

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: heartbeat.proto
// Protobuf C++ Version: 5.29.1

#ifndef heartbeat_2eproto_2epb_2eh
#define heartbeat_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_heartbeat_2eproto

namespace google {
	namespace protobuf {
		namespace internal {
			template <typename T>
			::absl::string_view GetAnyMessageName();
		}  // namespace internal
	}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_heartbeat_2eproto {
	static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
descriptor_table_heartbeat_2eproto;
namespace heartbeat {
	class HeartbeatReply;
	struct HeartbeatReplyDefaultTypeInternal;
	extern HeartbeatReplyDefaultTypeInternal _HeartbeatReply_default_instance_;
	class HeartbeatRequest;
	struct HeartbeatRequestDefaultTypeInternal;
	extern HeartbeatRequestDefaultTypeInternal _HeartbeatRequest_default_instance_;
}  // namespace heartbeat
namespace google {
	namespace protobuf {
	}  // namespace protobuf
}  // namespace google

namespace heartbeat {

	// ===================================================================


	// -------------------------------------------------------------------

	class HeartbeatRequest final
		: public ::google::protobuf::Message
		/* @@protoc_insertion_point(class_definition:heartbeat.HeartbeatRequest) */ {
	public:
		inline HeartbeatRequest() : HeartbeatRequest(nullptr) {}
		~HeartbeatRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
		void operator delete(HeartbeatRequest* msg, std::destroying_delete_t) {
			SharedDtor(*msg);
			::google::protobuf::internal::SizedDelete(msg, sizeof(HeartbeatRequest));
		}
#endif

		template <typename = void>
		explicit PROTOBUF_CONSTEXPR HeartbeatRequest(
			::google::protobuf::internal::ConstantInitialized);

		inline HeartbeatRequest(const HeartbeatRequest& from) : HeartbeatRequest(nullptr, from) {}
		inline HeartbeatRequest(HeartbeatRequest&& from) noexcept
			: HeartbeatRequest(nullptr, std::move(from)) {}
		inline HeartbeatRequest& operator=(const HeartbeatRequest& from) {
			CopyFrom(from);
			return *this;
		}
		inline HeartbeatRequest& operator=(HeartbeatRequest&& from) noexcept {
			if (this == &from) return *this;
			if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
				InternalSwap(&from);
			}
			else {
				CopyFrom(from);
			}
			return *this;
		}

		inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
			ABSL_ATTRIBUTE_LIFETIME_BOUND{
		  return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
		}
			inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
			ABSL_ATTRIBUTE_LIFETIME_BOUND{
		  return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
		}

			static const ::google::protobuf::Descriptor* descriptor() {
			return GetDescriptor();
		}
		static const ::google::protobuf::Descriptor* GetDescriptor() {
			return default_instance().GetMetadata().descriptor;
		}
		static const ::google::protobuf::Reflection* GetReflection() {
			return default_instance().GetMetadata().reflection;
		}
		static const HeartbeatRequest& default_instance() {
			return *internal_default_instance();
		}
		static inline const HeartbeatRequest* internal_default_instance() {
			return reinterpret_cast<const HeartbeatRequest*>(
				&_HeartbeatRequest_default_instance_);
		}
		static constexpr int kIndexInFileMessages = 0;
		friend void swap(HeartbeatRequest& a, HeartbeatRequest& b) { a.Swap(&b); }
		inline void Swap(HeartbeatRequest* other) {
			if (other == this) return;
			if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
				InternalSwap(other);
			}
			else {
				::google::protobuf::internal::GenericSwap(this, other);
			}
		}
		void UnsafeArenaSwap(HeartbeatRequest* other) {
			if (other == this) return;
			ABSL_DCHECK(GetArena() == other->GetArena());
			InternalSwap(other);
		}

		// implements Message ----------------------------------------------

		HeartbeatRequest* New(::google::protobuf::Arena* arena = nullptr) const {
			return ::google::protobuf::Message::DefaultConstruct<HeartbeatRequest>(arena);
		}
		using ::google::protobuf::Message::CopyFrom;
		void CopyFrom(const HeartbeatRequest& from);
		using ::google::protobuf::Message::MergeFrom;
		void MergeFrom(const HeartbeatRequest& from) { HeartbeatRequest::MergeImpl(*this, from); }

	private:
		static void MergeImpl(
			::google::protobuf::MessageLite& to_msg,
			const ::google::protobuf::MessageLite& from_msg);

	public:
		bool IsInitialized() const {
			return true;
		}
		ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
#if defined(PROTOBUF_CUSTOM_VTABLE)
	private:
		static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
		static ::uint8_t* _InternalSerialize(
			const MessageLite& msg, ::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream);

	public:
		::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
		::uint8_t* _InternalSerialize(
			::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream) const {
			return _InternalSerialize(*this, target, stream);
		}
#else   // PROTOBUF_CUSTOM_VTABLE
		::size_t ByteSizeLong() const final;
		::uint8_t* _InternalSerialize(
			::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream) const final;
#endif  // PROTOBUF_CUSTOM_VTABLE
		int GetCachedSize() const { return _impl_._cached_size_.Get(); }

	private:
		void SharedCtor(::google::protobuf::Arena* arena);
		static void SharedDtor(MessageLite& self);
		void InternalSwap(HeartbeatRequest* other);
	private:
		template <typename T>
		friend ::absl::string_view(
			::google::protobuf::internal::GetAnyMessageName)();
		static ::absl::string_view FullMessageName() { return "heartbeat.HeartbeatRequest"; }

	protected:
		explicit HeartbeatRequest(::google::protobuf::Arena* arena);
		HeartbeatRequest(::google::protobuf::Arena* arena, const HeartbeatRequest& from);
		HeartbeatRequest(::google::protobuf::Arena* arena, HeartbeatRequest&& from) noexcept
			: HeartbeatRequest(arena) {
			*this = ::std::move(from);
		}
		const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
		static void* PlacementNew_(const void*, void* mem,
			::google::protobuf::Arena* arena);
		static constexpr auto InternalNewImpl_();
		static const ::google::protobuf::internal::ClassDataFull _class_data_;

	public:
		::google::protobuf::Metadata GetMetadata() const;
		// nested types ----------------------------------------------------

		// accessors -------------------------------------------------------
		enum : int {
			kWorkerHostnameFieldNumber = 1,
			kWorkerIdFieldNumber = 2,
			kCpuUsageFieldNumber = 3,
			kMemoryUsageFieldNumber = 4,
		};
		// string worker_hostname = 1;
		void clear_worker_hostname();
		const std::string& worker_hostname() const;
		template <typename Arg_ = const std::string&, typename... Args_>
		void set_worker_hostname(Arg_&& arg, Args_... args);
		std::string* mutable_worker_hostname();
		PROTOBUF_NODISCARD std::string* release_worker_hostname();
		void set_allocated_worker_hostname(std::string* value);

	private:
		const std::string& _internal_worker_hostname() const;
		inline PROTOBUF_ALWAYS_INLINE void _internal_set_worker_hostname(
			const std::string& value);
		std::string* _internal_mutable_worker_hostname();

	public:
		// int32 worker_id = 2;
		void clear_worker_id();
		::int32_t worker_id() const;
		void set_worker_id(::int32_t value);

	private:
		::int32_t _internal_worker_id() const;
		void _internal_set_worker_id(::int32_t value);

	public:
		// float cpu_usage = 3;
		void clear_cpu_usage();
		float cpu_usage() const;
		void set_cpu_usage(float value);

	private:
		float _internal_cpu_usage() const;
		void _internal_set_cpu_usage(float value);

	public:
		// float memory_usage = 4;
		void clear_memory_usage();
		float memory_usage() const;
		void set_memory_usage(float value);

	private:
		float _internal_memory_usage() const;
		void _internal_set_memory_usage(float value);

	public:
		// @@protoc_insertion_point(class_scope:heartbeat.HeartbeatRequest)
	private:
		class _Internal;
		friend class ::google::protobuf::internal::TcParser;
		static const ::google::protobuf::internal::TcParseTable<
			2, 4, 0,
			50, 2>
			_table_;

		friend class ::google::protobuf::MessageLite;
		friend class ::google::protobuf::Arena;
		template <typename T>
		friend class ::google::protobuf::Arena::InternalHelper;
		using InternalArenaConstructable_ = void;
		using DestructorSkippable_ = void;
		struct Impl_ {
			inline explicit constexpr Impl_(
				::google::protobuf::internal::ConstantInitialized) noexcept;
			inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
				::google::protobuf::Arena* arena);
			inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
				::google::protobuf::Arena* arena, const Impl_& from,
				const HeartbeatRequest& from_msg);
			::google::protobuf::internal::ArenaStringPtr worker_hostname_;
			::int32_t worker_id_;
			float cpu_usage_;
			float memory_usage_;
			::google::protobuf::internal::CachedSize _cached_size_;
			PROTOBUF_TSAN_DECLARE_MEMBER
		};
		union { Impl_ _impl_; };
		friend struct ::TableStruct_heartbeat_2eproto;
	};
	// -------------------------------------------------------------------

	class HeartbeatReply final
		: public ::google::protobuf::Message
		/* @@protoc_insertion_point(class_definition:heartbeat.HeartbeatReply) */ {
	public:
		inline HeartbeatReply() : HeartbeatReply(nullptr) {}
		~HeartbeatReply() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
		void operator delete(HeartbeatReply* msg, std::destroying_delete_t) {
			SharedDtor(*msg);
			::google::protobuf::internal::SizedDelete(msg, sizeof(HeartbeatReply));
		}
#endif

		template <typename = void>
		explicit PROTOBUF_CONSTEXPR HeartbeatReply(
			::google::protobuf::internal::ConstantInitialized);

		inline HeartbeatReply(const HeartbeatReply& from) : HeartbeatReply(nullptr, from) {}
		inline HeartbeatReply(HeartbeatReply&& from) noexcept
			: HeartbeatReply(nullptr, std::move(from)) {}
		inline HeartbeatReply& operator=(const HeartbeatReply& from) {
			CopyFrom(from);
			return *this;
		}
		inline HeartbeatReply& operator=(HeartbeatReply&& from) noexcept {
			if (this == &from) return *this;
			if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
				InternalSwap(&from);
			}
			else {
				CopyFrom(from);
			}
			return *this;
		}

		inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
			ABSL_ATTRIBUTE_LIFETIME_BOUND{
		  return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
		}
			inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
			ABSL_ATTRIBUTE_LIFETIME_BOUND{
		  return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
		}

			static const ::google::protobuf::Descriptor* descriptor() {
			return GetDescriptor();
		}
		static const ::google::protobuf::Descriptor* GetDescriptor() {
			return default_instance().GetMetadata().descriptor;
		}
		static const ::google::protobuf::Reflection* GetReflection() {
			return default_instance().GetMetadata().reflection;
		}
		static const HeartbeatReply& default_instance() {
			return *internal_default_instance();
		}
		static inline const HeartbeatReply* internal_default_instance() {
			return reinterpret_cast<const HeartbeatReply*>(
				&_HeartbeatReply_default_instance_);
		}
		static constexpr int kIndexInFileMessages = 1;
		friend void swap(HeartbeatReply& a, HeartbeatReply& b) { a.Swap(&b); }
		inline void Swap(HeartbeatReply* other) {
			if (other == this) return;
			if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
				InternalSwap(other);
			}
			else {
				::google::protobuf::internal::GenericSwap(this, other);
			}
		}
		void UnsafeArenaSwap(HeartbeatReply* other) {
			if (other == this) return;
			ABSL_DCHECK(GetArena() == other->GetArena());
			InternalSwap(other);
		}

		// implements Message ----------------------------------------------

		HeartbeatReply* New(::google::protobuf::Arena* arena = nullptr) const {
			return ::google::protobuf::Message::DefaultConstruct<HeartbeatReply>(arena);
		}
		using ::google::protobuf::Message::CopyFrom;
		void CopyFrom(const HeartbeatReply& from);
		using ::google::protobuf::Message::MergeFrom;
		void MergeFrom(const HeartbeatReply& from) { HeartbeatReply::MergeImpl(*this, from); }

	private:
		static void MergeImpl(
			::google::protobuf::MessageLite& to_msg,
			const ::google::protobuf::MessageLite& from_msg);

	public:
		bool IsInitialized() const {
			return true;
		}
		ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
#if defined(PROTOBUF_CUSTOM_VTABLE)
	private:
		static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
		static ::uint8_t* _InternalSerialize(
			const MessageLite& msg, ::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream);

	public:
		::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
		::uint8_t* _InternalSerialize(
			::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream) const {
			return _InternalSerialize(*this, target, stream);
		}
#else   // PROTOBUF_CUSTOM_VTABLE
		::size_t ByteSizeLong() const final;
		::uint8_t* _InternalSerialize(
			::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream) const final;
#endif  // PROTOBUF_CUSTOM_VTABLE
		int GetCachedSize() const { return _impl_._cached_size_.Get(); }

	private:
		void SharedCtor(::google::protobuf::Arena* arena);
		static void SharedDtor(MessageLite& self);
		void InternalSwap(HeartbeatReply* other);
	private:
		template <typename T>
		friend ::absl::string_view(
			::google::protobuf::internal::GetAnyMessageName)();
		static ::absl::string_view FullMessageName() { return "heartbeat.HeartbeatReply"; }

	protected:
		explicit HeartbeatReply(::google::protobuf::Arena* arena);
		HeartbeatReply(::google::protobuf::Arena* arena, const HeartbeatReply& from);
		HeartbeatReply(::google::protobuf::Arena* arena, HeartbeatReply&& from) noexcept
			: HeartbeatReply(arena) {
			*this = ::std::move(from);
		}
		const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
		static void* PlacementNew_(const void*, void* mem,
			::google::protobuf::Arena* arena);
		static constexpr auto InternalNewImpl_();
		static const ::google::protobuf::internal::ClassDataFull _class_data_;

	public:
		::google::protobuf::Metadata GetMetadata() const;
		// nested types ----------------------------------------------------

		// accessors -------------------------------------------------------
		enum : int {
			kAcknowledgedFieldNumber = 1,
		};
		// int32 acknowledged = 1;
		void clear_acknowledged();
		::int32_t acknowledged() const;
		void set_acknowledged(::int32_t value);

	private:
		::int32_t _internal_acknowledged() const;
		void _internal_set_acknowledged(::int32_t value);

	public:
		// @@protoc_insertion_point(class_scope:heartbeat.HeartbeatReply)
	private:
		class _Internal;
		friend class ::google::protobuf::internal::TcParser;
		static const ::google::protobuf::internal::TcParseTable<
			0, 1, 0,
			0, 2>
			_table_;

		friend class ::google::protobuf::MessageLite;
		friend class ::google::protobuf::Arena;
		template <typename T>
		friend class ::google::protobuf::Arena::InternalHelper;
		using InternalArenaConstructable_ = void;
		using DestructorSkippable_ = void;
		struct Impl_ {
			inline explicit constexpr Impl_(
				::google::protobuf::internal::ConstantInitialized) noexcept;
			inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
				::google::protobuf::Arena* arena);
			inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
				::google::protobuf::Arena* arena, const Impl_& from,
				const HeartbeatReply& from_msg);
			::int32_t acknowledged_;
			::google::protobuf::internal::CachedSize _cached_size_;
			PROTOBUF_TSAN_DECLARE_MEMBER
		};
		union { Impl_ _impl_; };
		friend struct ::TableStruct_heartbeat_2eproto;
	};

	// ===================================================================




	// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HeartbeatRequest

// string worker_hostname = 1;
	inline void HeartbeatRequest::clear_worker_hostname() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.worker_hostname_.ClearToEmpty();
	}
	inline const std::string& HeartbeatRequest::worker_hostname() const
		ABSL_ATTRIBUTE_LIFETIME_BOUND{
		// @@protoc_insertion_point(field_get:heartbeat.HeartbeatRequest.worker_hostname)
		return _internal_worker_hostname();
	}
		template <typename Arg_, typename... Args_>
	inline PROTOBUF_ALWAYS_INLINE void HeartbeatRequest::set_worker_hostname(Arg_&& arg,
		Args_... args) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.worker_hostname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
		// @@protoc_insertion_point(field_set:heartbeat.HeartbeatRequest.worker_hostname)
	}
	inline std::string* HeartbeatRequest::mutable_worker_hostname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
		std::string* _s = _internal_mutable_worker_hostname();
		// @@protoc_insertion_point(field_mutable:heartbeat.HeartbeatRequest.worker_hostname)
		return _s;
	}
	inline const std::string& HeartbeatRequest::_internal_worker_hostname() const {
		::google::protobuf::internal::TSanRead(&_impl_);
		return _impl_.worker_hostname_.Get();
	}
	inline void HeartbeatRequest::_internal_set_worker_hostname(const std::string& value) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.worker_hostname_.Set(value, GetArena());
	}
	inline std::string* HeartbeatRequest::_internal_mutable_worker_hostname() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		return _impl_.worker_hostname_.Mutable(GetArena());
	}
	inline std::string* HeartbeatRequest::release_worker_hostname() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		// @@protoc_insertion_point(field_release:heartbeat.HeartbeatRequest.worker_hostname)
		return _impl_.worker_hostname_.Release();
	}
	inline void HeartbeatRequest::set_allocated_worker_hostname(std::string* value) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.worker_hostname_.SetAllocated(value, GetArena());
		if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.worker_hostname_.IsDefault()) {
			_impl_.worker_hostname_.Set("", GetArena());
		}
		// @@protoc_insertion_point(field_set_allocated:heartbeat.HeartbeatRequest.worker_hostname)
	}

	// int32 worker_id = 2;
	inline void HeartbeatRequest::clear_worker_id() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.worker_id_ = 0;
	}
	inline ::int32_t HeartbeatRequest::worker_id() const {
		// @@protoc_insertion_point(field_get:heartbeat.HeartbeatRequest.worker_id)
		return _internal_worker_id();
	}
	inline void HeartbeatRequest::set_worker_id(::int32_t value) {
		_internal_set_worker_id(value);
		// @@protoc_insertion_point(field_set:heartbeat.HeartbeatRequest.worker_id)
	}
	inline ::int32_t HeartbeatRequest::_internal_worker_id() const {
		::google::protobuf::internal::TSanRead(&_impl_);
		return _impl_.worker_id_;
	}
	inline void HeartbeatRequest::_internal_set_worker_id(::int32_t value) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.worker_id_ = value;
	}

	// float cpu_usage = 3;
	inline void HeartbeatRequest::clear_cpu_usage() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.cpu_usage_ = 0;
	}
	inline float HeartbeatRequest::cpu_usage() const {
		// @@protoc_insertion_point(field_get:heartbeat.HeartbeatRequest.cpu_usage)
		return _internal_cpu_usage();
	}
	inline void HeartbeatRequest::set_cpu_usage(float value) {
		_internal_set_cpu_usage(value);
		// @@protoc_insertion_point(field_set:heartbeat.HeartbeatRequest.cpu_usage)
	}
	inline float HeartbeatRequest::_internal_cpu_usage() const {
		::google::protobuf::internal::TSanRead(&_impl_);
		return _impl_.cpu_usage_;
	}
	inline void HeartbeatRequest::_internal_set_cpu_usage(float value) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.cpu_usage_ = value;
	}

	// float memory_usage = 4;
	inline void HeartbeatRequest::clear_memory_usage() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.memory_usage_ = 0;
	}
	inline float HeartbeatRequest::memory_usage() const {
		// @@protoc_insertion_point(field_get:heartbeat.HeartbeatRequest.memory_usage)
		return _internal_memory_usage();
	}
	inline void HeartbeatRequest::set_memory_usage(float value) {
		_internal_set_memory_usage(value);
		// @@protoc_insertion_point(field_set:heartbeat.HeartbeatRequest.memory_usage)
	}
	inline float HeartbeatRequest::_internal_memory_usage() const {
		::google::protobuf::internal::TSanRead(&_impl_);
		return _impl_.memory_usage_;
	}
	inline void HeartbeatRequest::_internal_set_memory_usage(float value) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.memory_usage_ = value;
	}

	// -------------------------------------------------------------------

	// HeartbeatReply

	// int32 acknowledged = 1;
	inline void HeartbeatReply::clear_acknowledged() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.acknowledged_ = 0;
	}
	inline ::int32_t HeartbeatReply::acknowledged() const {
		// @@protoc_insertion_point(field_get:heartbeat.HeartbeatReply.acknowledged)
		return _internal_acknowledged();
	}
	inline void HeartbeatReply::set_acknowledged(::int32_t value) {
		_internal_set_acknowledged(value);
		// @@protoc_insertion_point(field_set:heartbeat.HeartbeatReply.acknowledged)
	}
	inline ::int32_t HeartbeatReply::_internal_acknowledged() const {
		::google::protobuf::internal::TSanRead(&_impl_);
		return _impl_.acknowledged_;
	}
	inline void HeartbeatReply::_internal_set_acknowledged(::int32_t value) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.acknowledged_ = value;
	}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

	// @@protoc_insertion_point(namespace_scope)
}  // namespace heartbeat


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // heartbeat_2eproto_2epb_2eh
